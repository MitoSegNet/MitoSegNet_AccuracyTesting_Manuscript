"""

Analyse tables generated by pval_frequency_generate_results.py

Statistical analysis

Create stacked bar figure

"""

import pandas as pd
import matplotlib.pyplot as plt
from Plot_Significance import significance_bar
from scipy.stats import chi2_contingency


path = ""


file_list = ['MitoSegNet_Morph_Dist_comparison.csv', 'Finetuned Fiji U-Net_Morph_Dist_comparison.csv' ,
             'Ilastik_Morph_Dist_comparison.csv', 'Gaussian_Morph_Dist_comparison.csv', 'Hessian_Morph_Dist_comparison.csv',
             'Laplacian_Morph_Dist_comparison.csv']

s = []
s1 = []
s2 = []
s3 = []

ns = []

seg_list = ["MitoSegNet", "Finetuned Fiji U-Net", "Ilastik", "Gaussian", "Hessian", "Laplacian"]
observed_values = pd.DataFrame(columns=seg_list)

total_values = 120
for file, seg_method in zip(file_list, seg_list):

    if ".csv" in file:

        #print(file)
        table = pd.read_csv(path + "/" + file)

        # removing first column
        table.drop(table.columns[[0]], axis=1, inplace=True)

        zero_p = 0
        one_p = 0
        two_p = 0
        three_p = 0

        for (index, row) in table.iterrows():

            for column in row:

                if column == 0:
                    zero_p += 1

                elif column == 1:
                    one_p += 1

                elif column == 2:
                    two_p += 1

                elif column == 3:
                    three_p += 1

        ns.append(zero_p/total_values)
        s.append((total_values-zero_p)/total_values)

        s1.append(one_p/total_values)
        s2.append(two_p/total_values)
        s3.append(three_p/total_values)

        #print(zero_p)
        #print(one_p)
        #print(two_p)
        #print(three_p)

        observed_values[seg_method] = [zero_p, one_p+two_p+three_p]

print(observed_values)

# print p-values based on chi-square test
for seg in observed_values:
    if seg != "MitoSegNet":

        f_obs = [observed_values["MitoSegNet"].tolist(), observed_values[seg].tolist()]
        pval = chi2_contingency(f_obs, correction=False)[1]

        print(seg, pval)


ind = ["MitoSegNet", "Pretrained\nFiji U-Net", "Ilastik", "Gaussian", "Hessian", "Laplacian"]

dist = 0.1
bar_y = 0.03
significance_bar(pos_y=1.1, pos_x=[0, 1], bar_y=bar_y, p=2, y_dist=bar_y, distance=dist)
significance_bar(pos_y=1.2, pos_x=[0, 2], bar_y=bar_y, p=2, y_dist=bar_y, distance=dist)
significance_bar(pos_y=1.3, pos_x=[0, 3], bar_y=bar_y, p=3, y_dist=bar_y, distance=dist)
significance_bar(pos_y=1.4, pos_x=[0, 4], bar_y=bar_y, p=3, y_dist=bar_y, distance=dist)
significance_bar(pos_y=1.5, pos_x=[0, 5], bar_y=bar_y, p=3, y_dist=bar_y, distance=dist)

# creating stacked bar graph

#"""
p1 = plt.bar(ind, ns, color="white", edgecolor="black")
p2 = plt.bar(ind, s, bottom=ns, color="black", edgecolor="black")

plt.legend((p1[0], p2[0]), ('p>0.05', 'p<0.05'), prop={"size": 20}, bbox_to_anchor=(1, 0.5))
#"""

# possiblity to create stacked bar graph showing ns and three different alpha categories
"""
p1 = plt.bar(ind, ns, color="white", edgecolor="black")
p2 = plt.bar(ind, s1, bottom=ns, color="silver", edgecolor="black")
p3 = plt.bar(ind, s2, bottom=[i+j for i,j in zip(ns, s1)], color="gray", edgecolor="black")
p4 = plt.bar(ind, s3, bottom=[i+j+n for i,j,n in zip(ns, s1, s2)], color="black", edgecolor="black")

plt.legend((p1[0], p2[0], p3[0], p4[0]), ('p>0.05', '0.01<p<0.05', '0.001<p<0.01', 'p<0.001'), prop={"size": 20}, bbox_to_anchor=(1, 0.5))
"""

plt.ylabel("p-value frequency", size=32)
plt.tick_params(axis="x", labelsize=34, rotation=45)
plt.tick_params(axis="y", labelsize=28)

plt.show()






